{"version":3,"file":"gutenberg-filters.js","mappings":";;;;;;;;;;AAAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA,eAAe,4BAA4B;WAC3C,eAAe;WACf,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA,8CAA8C;;;;;WCA9C;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAwBC,EAAE,CAACC,MAAjC;AACA,MAAM;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,IAAkCH,EAAE,CAACI,WAA3C;AACA,MAAM;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA,SAAjB;AAA4BC,EAAAA,QAA5B;AAAsCC,EAAAA,eAAtC;AAAuDC,EAAAA,aAAvD;AAAsEC,EAAAA;AAAtE,IAAsFV,EAAE,CAACW,UAA/F;AAGAZ,iBAAiB,CAAC,kBAAD,EAAqB;AACpCa,EAAAA,KAAK,EAAE,YAD6B;AAEpCC,EAAAA,QAAQ,EAAE,QAF0B;AAGpCC,EAAAA,UAAU,EAAE;AACVC,IAAAA,SAAS,EAAE;AACTC,MAAAA,IAAI,EAAE,QADG;AAETC,MAAAA,MAAM,EAAE,MAFC;AAGTC,MAAAA,QAAQ,EAAE;AAHD,KADD;AAMVC,IAAAA,aAAa,EAAE;AACbH,MAAAA,IAAI,EAAE,QADO;AAEbI,MAAAA,OAAO,EAAE;AAFI;AANL,GAHwB;AAcpCC,EAAAA,IAAI,EAAGC,KAAD,IAAW;AACf,UAAM;AAAER,MAAAA,UAAF;AAAcS,MAAAA;AAAd,QAAgCD,KAAtC;AACA,WACE,+EACE,kEAAC,iBAAD,QACE,kEAAC,SAAD;AACE,WAAK,EAAC,uFADR;AAEE,iBAAW,EAAE;AAFf,OAIE,kEAAC,QAAD,QACE,kEAAC,aAAD;AACE,WAAK,EAAC,2HADR;AAEE,WAAK,EAAER,UAAU,CAACK,aAFpB;AAGE,aAAO,EAAE,CACP;AAACK,QAAAA,KAAK,EAAE,MAAR;AAAgBC,QAAAA,KAAK,EAAE;AAAvB,OADO,EAEP;AAACD,QAAAA,KAAK,EAAE,KAAR;AAAeC,QAAAA,KAAK,EAAE;AAAtB,OAFO,EAGP;AAACD,QAAAA,KAAK,EAAE,YAAR;AAAsBC,QAAAA,KAAK,EAAE;AAA7B,OAHO,CAHX;AAQE,cAAQ,EAAGC,MAAD,IAAYH,aAAa,CAAC;AAAEJ,QAAAA,aAAa,EAAEO;AAAjB,OAAD;AARrC,MADF,CAJF,CADF,CADF,EAqBE,kEAAC,QAAD;AACE,aAAO,EAAC,KADV;AAEE,iBAAW,EAAC,0CAFd;AAGE,WAAK,EAAEZ,UAAU,CAACC,SAHpB;AAIE,cAAQ,EAAGY,OAAD,IAAaJ,aAAa,CAAC;AAAER,QAAAA,SAAS,EAAEY;AAAb,OAAD;AAJtC,MArBF,CADF;AA8BD,GA9CmC;AA+CpCC,EAAAA,IAAI,EAAGN,KAAD,IAAW;AACf,UAAM;AAAER,MAAAA;AAAF,QAAiBQ,KAAvB;AACA,WACE,+EACE;AAAK,eAAS,EAAER,UAAU,CAACK;AAA3B,OACE,gFACGL,UAAU,CAACC,SADd,CADF,CADF,CADF;AASD;AA1DmC,CAArB,CAAjB,C","sources":["webpack://genichesko/external window [\"wp\",\"element\"]","webpack://genichesko/webpack/bootstrap","webpack://genichesko/webpack/runtime/compat get default export","webpack://genichesko/webpack/runtime/define property getters","webpack://genichesko/webpack/runtime/hasOwnProperty shorthand","webpack://genichesko/webpack/runtime/make namespace object","webpack://genichesko/./gutenberg-dev/js/gutenberg-filters.js"],"sourcesContent":["module.exports = window[\"wp\"][\"element\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","console.log('codeBlock');\nconst { registerBlockType } = wp.blocks;\nconst { RichText, InspectorControls } = wp.blockEditor;\nconst { ToggleControl, PanelBody, PanelRow, CheckboxControl, SelectControl, ColorPicker } = wp.components;\n \n \nregisterBlockType('treba/code-block', {\n  title: 'Treba Code',\n  category: 'common',\n  attributes: {\n    trebaCode: {\n      type: 'string',\n      source: 'html',\n      selector: 'code',\n    },\n    trebaCodeLang: {\n      type: 'string',\n      default: 'language-css'\n    },\n  },\n  edit: (props) => { \n    const { attributes, setAttributes } = props;\n    return (\n      <div>\n        <InspectorControls>\n          <PanelBody\n            title=\"Настройки блока\"\n            initialOpen={true}\n          >\n            <PanelRow>\n              <SelectControl\n                label=\"Язык программирования\"\n                value={attributes.trebaCodeLang}\n                options={[\n                  {label: \"html\", value: 'language-html'},\n                  {label: \"css\", value: 'language-css'},\n                  {label: \"javascript\", value: 'language-javascript'},\n                ]}\n                onChange={(newval) => setAttributes({ trebaCodeLang: newval })}\n              />\n            </PanelRow>\n          </PanelBody>\n        </InspectorControls>\n\n        <RichText\n          tagName=\"pre\"\n          placeholder=\"Ваш код...\"\n          value={attributes.trebaCode}\n          onChange={(newtext) => setAttributes({ trebaCode: newtext })}\n        />\n      </div>\n    );\n  },\n  save: (props) => { \n    const { attributes } = props;\n    return (\n      <div>\n        <pre className={attributes.trebaCodeLang}>\n          <code>\n            {attributes.trebaCode}\n          </code>\n        </pre>\n      </div>\n    );\n  }\n\n});"],"names":["console","log","registerBlockType","wp","blocks","RichText","InspectorControls","blockEditor","ToggleControl","PanelBody","PanelRow","CheckboxControl","SelectControl","ColorPicker","components","title","category","attributes","trebaCode","type","source","selector","trebaCodeLang","default","edit","props","setAttributes","label","value","newval","newtext","save"],"sourceRoot":""}